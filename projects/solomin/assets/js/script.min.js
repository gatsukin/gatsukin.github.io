//Если в категории не будет слайдов, будет просто пустота, некрасиво, но не ломает
const categoriesFilterSwiper = (event, swiperClass, swiperName) => {
  activateExclusive(event);
  const category = event.target.dataset.category;
  const allElements = document.querySelectorAll(
    `.${swiperClass} .swiper-slide`
  );

  allElements.forEach((item) => {
    if (category === "all") {
      item.removeAttribute("style");
    } else {
      item.style.display = item.dataset.category === category ? "flex" : "none";
    }
  });

  sliders[swiperName].slideTo(0);
  sliders[swiperName].update();
};

const getAllElements = (element) => {
  const mainClass = Array.from(element.classList)[0];
  return document.querySelectorAll(`.${mainClass}`);
};
//Выберет первый класс как основной класс элементов и заменит класс на текущем,
const activateExclusive = (event) => {
  const allElements = getAllElements(event.target);
  allElements.forEach((item) => {
    //console.log(item !== event.target);
    item !== event.target
      ? item.classList.remove("active")
      : item.classList.add("active");
  });
};

const submitContactsForm = (submitEvent) => {
  const data = new FormData(submitEvent.target);
  //console.log(Array.from(data.entries()));
  showSubmitMessage();
};
const showSubmitMessage = () => {
  const message = document.getElementById("form-submit-message");
  message.style.display = "flex";
  const backdrop = document.getElementById("backdrop");
  backdrop.classList.toggle("active");
  document.body.classList.add("active");
};
const hideSubmitMessage = () => {
  const backdrop = document.getElementById("backdrop");
  backdrop.classList.toggle("active");
  const message = document.getElementById("form-submit-message");
  message.removeAttribute("style");
  document.body.classList.remove("active");
};

if (document.getElementById("galContent")) {
  var arrayGallery = [];
  arrayGallery = Array.from(
    document.getElementById("galContent").querySelectorAll("img")
  );
}

const categoryChoose = (attr) => {
  if (attr === "all") {
    return arrayGallery;
  } else {
    return arrayGallery.filter((img) => {
      return img.dataset.att === attr;
    });
  }
};
const galleryTemplate = (imgs) => `<div class="gallery-row">
<div class="gallery-row__columns one">
    <div class="col first">
            <div class="top">
                ${imgs[0] ? imgs[0].outerHTML : ""}
            </div>
            <div class="bottom">
                ${imgs[1] ? imgs[1].outerHTML : ""}
            </div>
    </div>
    <div class="col second">
            <div class="top">
                ${imgs[2] ? imgs[2].outerHTML : ""}
            </div>
            <div class="bottom">
                ${imgs[3] ? imgs[3].outerHTML : ""}
            </div>
    </div>
</div>
<div class="gallery-row__columns two">
    <div class="col first">
            <div class="top">
                ${imgs[4] ? imgs[4].outerHTML : ""}
            </div>
    </div>
    <div class="col second">
            <div class="top">
                ${imgs[5] ? imgs[5].outerHTML : ""}
            </div>
            <div class="bottom">
                ${imgs[6] ? imgs[6].outerHTML : ""}
            </div>
    </div>
</div>
</div>`;
const getChunks = (inputArray, perChunk = 7) => {
  return inputArray.reduce((resultArray, item, index) => {
    const chunkIndex = Math.floor(index / perChunk);
    if (!resultArray[chunkIndex]) {
      resultArray[chunkIndex] = []; // start a new chunk
    }
    resultArray[chunkIndex].push(item);
    return resultArray;
  }, []);
};
const clearHtml = () => {
  document.querySelectorAll(".gallery-row").forEach((element) => {
    element.remove();
  });
};
const createHtml = (array) => {
  let bestDivs = [];
  array.forEach((imgs) => {
    bestDivs.push(galleryTemplate(imgs));
  });
  document.getElementById("galContent").innerHTML = bestDivs.join("");
};
const addHide = () => {
  let test = document.getElementById("galContent").lastElementChild;
  test.querySelectorAll("img").length <= 4
    ? test.classList.add("hide")
    : () => {};
};

const filteredGallery = (event, attr) => {
  activateExclusive(event);
  let needArray = categoryChoose(attr);
  if (!needArray.length) {
    createHtml(Array(1).fill(""));
    addHide();
    return;
  }
  let chunkArray = getChunks(needArray);
  clearHtml();
  createHtml(chunkArray);
  addHide();
};

var maps = {};

let iniMap = () => {
  if (ymaps) {
    ymaps.ready(init);
    function init() {
      var myMap = new ymaps.Map(
        "map",
        {
          center: [56.012185, 92.849919],
          // Уровень масштабирования. Допустимые значения:
          // от 0 (весь мир) до 19.
          zoom: 12,
          controls: [],
          behaviors: currentPage === "contacts-page" ? [] : ["default"],
        },
        { suppressMapOpenBlock: true }
      );

      // Создаём макет содержимого.
      var MyIconContentLayout = ymaps.templateLayoutFactory.createClass(
        '<div style="color: #FFFFFF; font-weight: bold;">$[properties.iconContent]</div>'
      );
      var myPlacemarkWithContentRight = new ymaps.Placemark(
        [56.006905, 92.848574],
        {},
        {
          // Опции.
          // Необходимо указать данный тип макета.
          iconLayout: "default#imageWithContent",
          // Своё изображение иконки метки.
          iconImageHref:
            "/local/templates/bauart/assets/img/svg/elements/map-point.svg",
          // Размеры метки.
          iconImageSize: [122, 185],
          // Смещение левого верхнего угла иконки относительно
          // её "ножки" (точки привязки).
          iconImageOffset: [-61, -158],
          // Смещение слоя с содержимым относительно слоя с картинкой.
          iconContentOffset: [10, 10],
          // Макет содержимого.
          iconContentLayout: MyIconContentLayout,
        }
      );
      myPlacemarkWithContentRight.events.add("click", () => {
        location.assign(
          "https://yandex.ru/maps/62/krasnoyarsk/house/ulitsa_bograda_106/bUsYfgNoTEIDQFtsfXxxd3VjYQ==/?ll=92.848574%2C56.006905&z=17"
        );
      });
      myMap.geoObjects.add(myPlacemarkWithContentRight);
      maps.myMap = myMap;
    }
  } else {
    setTimeout(() => {
      iniMap();
    }, 150);
  }
};

const iniImgBlockMap = () => {
  if (ymaps) {
    ymaps.ready(init);
    function init() {
      // Создание карты.
      var imgBlockMap = new ymaps.Map(
        "header-map",
        {
          center: [56.0202185, 92.849919],

          zoom: 12,
          controls: [],
        },
        { suppressMapOpenBlock: true }
      );
      // Создаём макет содержимого.
      var MyIconContentLayout = ymaps.templateLayoutFactory.createClass(
        '<div style="color: #FFFFFF; font-weight: bold;">$[properties.iconContent]</div>'
      );
      var myPlacemarkWithContentRight = new ymaps.Placemark(
        [56.004905, 92.848574],
        {},
        {
          // Опции.
          // Необходимо указать данный тип макета.
          iconLayout: "default#imageWithContent",
          // Своё изображение иконки метки.
          // iconImageHref: "/local/templates/bauart/assets/img/svg/elements/map-point.svg",
          iconImageHref: "/assets/img/svg/elements/map-point.svg",
          // Размеры метки.
          iconImageSize: [104, 143],
          // Смещение левого верхнего угла иконки относительно
          // её "ножки" (точки привязки).
          iconImageOffset: [-52, -143],
          // Смещение слоя с содержимым относительно слоя с картинкой.
          iconContentOffset: [10, 10],
          // Макет содержимого.
          iconContentLayout: MyIconContentLayout,
        }
      );
      myPlacemarkWithContentRight.events.add("click", () => {
        location.assign(
          "https://yandex.ru/maps/62/krasnoyarsk/house/ulitsa_bograda_106/bUsYfgNoTEIDQFtsfXxxd3VjYQ==/?ll=92.848574%2C56.006905&z=17"
        );
      });
      imgBlockMap.geoObjects.add(myPlacemarkWithContentRight);
      if (document.body.clientWidth <= 680) {
        //console.log(maps);
        imgBlockMap.setCenter([56.0222185, 92.849919]);
      } else {
        imgBlockMap.setCenter([56.0202185, 92.849919]);
      }
      maps.imgBlockMap = imgBlockMap;
      //   .add(myPlacemarkWithContentLeft);
    }
  } else {
    setTimeout(() => {
      iniImgBlockMap();
    }, 150);
  }
};

const openModal = (review) => {
  document.getElementById(review).classList.add("active");
  document.getElementById("backdrop").classList.add("active");

  const modalsActive = document.getElementById("modalBlock");
  modalsActive.classList.add("active");
  modalsActive.onclick = (event) => closeModal(event, review);
  document.body.classList.add("active");
};
const closeModal = (event, modal) => {
  if (event) {
    const clickedReview = event.path.find((element) => {
      return element.classList
        ? Array.from(element.classList).includes("review-card")
        : false;
    });
    if (clickedReview) return;
  }
  document.getElementById(modal).classList.remove("active");
  document.getElementById("backdrop").classList.remove("active");
  document.body.classList.remove("active");
  document.getElementById("modalBlock").classList.remove("active");
};

const currentPage = document.querySelector("main").className;

const defaultSettings = {
  direction: "horizontal",
  grabCursor: true,
  loop: true,
};
const custom_pagination_setup = (prefix) => {
  return {
    el: "." + prefix + "-pagination",
    type: "fraction",
    renderFraction: (currentClass, totalClass) => {
      const curClass = currentClass + " " + "big-number" + " " + "heading-d";
      const totClass = totalClass + " " + "small-number" + " " + "subheading-d";
      return (
        '<span class="' +
        curClass +
        '">' +
        "</span>" +
        '<span class="slash">/</span>' +
        '<span class="' +
        totClass +
        '">' +
        "</span>"
      );
    },
    formatFractionCurrent: (number) => prependZero(number),
    formatFractionTotal: (number) => prependZero(number),
  };
};
//Сюда можно добавить слайдеры которыми нужно манипулировать в рантайме
window.sliders = {};
const swiperSetups = () => {
  if (currentPage === "main-page") {
    const guide_carousel_swiper = new Swiper(".guide-swiper", {
      // Optional parameters
      ...defaultSettings,

      effect: "fade",
      fadeEffect: {
        crossfade: true,
      },
      speed: 200,
      centerSlides: true,
      spaceBetween: 100,
      // If we need pagination
      pagination: {
        el: ".guide-swiper-pagination",
        clickable: true,
        renderBullet: function (index, className) {
          return (
            '<span class="' +
            className +
            " pagination-bullet" +
            '">' +
            "</span>"
          );
        },
      },

      // Navigation arrows
      navigation: {
        nextEl: ".guide-swiper-button-next",
      },
    });

    const placement_slider = new Swiper(".placement-swiper", {
      ...defaultSettings,
      freeMode: { enabled: true, sticky: true },
      slidesPerView: "auto",
      spaceBetween: 12,
      loop: false,
      pagination: custom_pagination_setup("placement"),
      navigation: {
        nextEl: ".placement-button-next",
        prevEl: ".placement-button-prev",
      },
      breakpoints: {
        breakpoints: {
          680: {
            slidesOffsetAfter: 0,
            spaceBetween: 20,
          },
        },
        1320: {
          speed: 600,
          freeMode: false,
          slidesPerView: 3,
          slidesPerGroup: 3,
        },
      },
    });
    const commodities_slider = new Swiper(".commodities-swiper", {
      ...defaultSettings,
      freeMode: { enabled: true, sticky: true },
      grabCursor: false,
      loop: false,
      slidesPerView: "auto",
      spaceBetween: 16,
      slidesOffsetAfter: 20,
      pagination: custom_pagination_setup("commodities"),

      navigation: {
        nextEl: ".commodities-button-next",
        prevEl: ".commodities-button-prev",
      },

      breakpoints: {
        1320: {
          speed: 600,
          freeMode: false,
          slidesOffsetAfter: 0,
          slidesPerView: 4,
          slidesPerGroup: 4,
        },
      },
    });
    sliders.commodities_slider = commodities_slider;

    const stories_slider = new Swiper(".stories-swiper", {
      ...defaultSettings,
      freeMode: { enabled: true, sticky: true },
      slidesPerView: "auto",
      spaceBetween: 12,
      loop: false,
      pagination: custom_pagination_setup("stories"),
      navigation: {
        nextEl: ".stories-button-next",
        prevEl: ".stories-button-prev",
      },
      breakpoints: {
        breakpoints: {
          680: {
            slidesOffsetAfter: 0,
            spaceBetween: 20,
          },
        },
        1320: {
          speed: 600,
          freeMode: false,
          slidesPerView: 3,
          slidesPerGroup: 3,
        },
      },
    });
  }
  if (currentPage === "about-page") {
    const about_image_slider = new Swiper(".about-image-swiper", {
      // Optional parameters
      ...defaultSettings,
      effect: "fade",
      fadeEffect: {
        crossfade: true,
      },

      speed: 1000,
      autoplay: {
        disableOnInteraction: false,
        pauseOnMouseEnter: true,
        delay: 2000,
      },
      // If we need pagination
      pagination: custom_pagination_setup("about-image"),

      // Navigation arrows
      navigation: {
        nextEl: ".about-image-button-next",
        prevEl: ".about-image-button-prev",
      },
    });
  }
};

const setOnLoad = () => {
  window.onload = function onLoad() {
    document.body.style.opacity = 1;
    swiperSetups();
    if (
      document.querySelector(".contact-block") ||
      document.querySelector(".contacts-page")
    ) {
      iniMap();
    }
    if (document.querySelector(".map-img-block")) {
      iniImgBlockMap();
    }
    if (currentPage === "contacts-page") {
      //console.log("recentering contacts map");
      recenterContactsMap();
    }
    //в rooms-card
    if (document.querySelector(".rooms-page")) {
      if (generateRoomSwipers) {
        generateRoomSwipers();
      }

      if (hideExtraCommodities && document.body.clientWidth >= 680) {
        //console.log("hide");
        hideExtraCommodities();
      }
    }
    if (document.querySelector(".main-page")) {
      Fancybox.bind(
        "[data-fancybox='gallery-main-header']",
        "[data-fancybox='gallery-block']",
        {
          // Your options go here
        }
      );
    }
  };
};

const hideMenu = () => {
  const menu = document.getElementById("header-menu");
  if (menu) {
    menu.style.height = menu.style.height !== "0px" ? "0" : () => {};
  }
};

const manageCommodities = () => {
  if (document.querySelector(".rooms-page")) {
    if (document.body.clientWidth <= 680) {
      //console.log("show");
      showExtraCommodities();
    } else {
      hideExtraCommodities();
    }
  }
};
const recenterMapImgBlock = () => {
  if (currentPage === "/") {
    if (document.body.clientWidth <= 680) {
      maps.imgBlockMap.setCenter([56.0222185, 92.849919]);
    } else {
      maps.imgBlockMap.setCenter([56.0202185, 92.849919]);
    }
  }
};
const recenterContactsMap = () => {
  if (currentPage === "contacts-page" && maps.myMap) {
    if (document.body.clientWidth <= 680) {
      maps.myMap.setCenter([56.07, 92.849919]);
    } else if (document.body.clientWidth <= 1175) {
      maps.myMap.setCenter([56.1105, 92.849919]);
    } else {
      maps.myMap.setCenter([56.06, 92.849919]);
    }
  } else {
    setTimeout(() => {
      recenterContactsMap();
    }, 150);
  }
};
window.onresize = () => {
  hideMenu();
  manageCommodities();
  recenterMapImgBlock();
  recenterContactsMap();
};

window.onscroll = () => {
  changeHeaderBG();
};

const changeHeaderBG = () => {
  const header = document.querySelector("header");
  const scrollable = document.querySelector("html");

  if (scrollable.scrollTop > 100) {
    header.style.background = "none";
    header.style.backgroundColor = "#242424";
  } else {
    header.style.backgroundColor = "rgba(0,0,0,0)";
    header.style.removeProperty("background");
  }
};


const firstCategory = document.querySelector(".js-menu-changer")

function setCategory(item) {
  let categoryName = item.getAttribute("data-category");
  let allItems = document.querySelectorAll('.js-menu-card')
  allItems.forEach(function (element,index){
    let itemCategoryName = element.getAttribute("data-category");
    if(itemCategoryName != categoryName) {
        element.style.display = "none";
    }
    else {
      element.style.display = "grid";
    }
  })
  const allCategories = document.querySelectorAll(".js-menu-changer")
  allCategories.forEach(function (category,index) {
    if(category.getAttribute("data-category") == categoryName) {
      category.classList.add("active")
    }
    else {
      category.classList.remove("active")
    }
  })
}

if(firstCategory) setCategory(firstCategory);

if (document.querySelector(".rooms-page")) {
  var generateRoomLibs = (id) => {
    const room_swiper = new Swiper(`#room-swiper-${id}`, {
      // Optional parameters
      direction: "horizontal",
      spaceBetween: 10,
      // If we need pagination
      navigation: {
        nextEl: `#room-button-next-${id}`,
        prevEl: `#room-button-prev-${id}`,
      },
      scrollbar: {
        el: `#room-swiper-scrollbar-${id}`,
        draggable: true,
        hide: false,
      },
    });

    Fancybox.bind(`[data-fancybox='gallery-room-${id}']`, {});
  };
  var generateRoomSwipers = () => {
    const roomCards = document.querySelectorAll(".room-card");
    if (roomCards) {
      roomCards.forEach((card, index) => {
        var cardId = card.getAttribute('data-cardId');
        generateRoomLibs(cardId);
        Fancybox.bind(`[data-gallery='gallery-room-${cardId}']`, {
          groupAll: true,
        });
      });
    }
  };
  //Скрывает удобства номера(в одной карточке либо во всех)
  var hideExtraCommodities = (id) => {
    let cards = getCards(id);
    cards.forEach((card) => {
      var cardId = card.getAttribute('data-cardId');
      card.querySelectorAll(`[data-commodity="${cardId}"]`).forEach((item, index) => {
        if (index >= 5) {
          item.style.display = "none";
        }
      });
      card.querySelector(`#all-${cardId}`).classList.remove("hide");
      card.querySelector(`#hide-${cardId}`).classList.add("hide");
    });
  };
  //Показывает удобства номера(в одной карточке либо во всех)
  var showExtraCommodities = (id) => {
    let cards = getCards(id);
    cards.forEach((card) => {
      var cardId = card.getAttribute('data-cardId');
      card.querySelectorAll(`[data-commodity="${cardId}"]`).forEach((commodity) => {
        commodity.removeAttribute("style");
      });
      card.querySelector(`#all-${cardId}`).classList.add("hide");
      card.querySelector(`#hide-${cardId}`).classList.remove("hide");
    });
  };
  //Получить конкретную карточку либо все на странице
  var getCards = (id) => {
    if (id) {
      return [document.getElementById(`room-card-${id}`)];
    } else return document.querySelectorAll(".rooms-page .room-card");
  };
  //Переключает кнопку "подробнее", раскрывает текст
  var toggleDetailed = (id) => {
    const card = document.getElementById(`room-card-${id}`);
    const cardText = card.querySelector(`.card-text`);
    const detailed = card.querySelector(`.detailed .subscriptions`);
    const svgContainer = card.querySelector(`.detailed .svg-container`);
    svgContainer.style.rotate =
      svgContainer.style && svgContainer.style.rotate === "180deg"
        ? "0deg"
        : "180deg";
    detailed.innerHTML =
      detailed.innerHTML === detailed.getAttribute('data-readmore') ? detailed.getAttribute('data-hide') : detailed.getAttribute('data-readmore');
      //detailed.innerHTML === "подробнее" ? "скрыть" : "подробнее";
    //console.log(!cardText.style);
    cardText.style.display =
      cardText.style.display === "" || cardText.style.display === "-webkit-box"
        ? "block"
        : "-webkit-box";
  };
}

setOnLoad();

const toggleMenu = () => {
  const menu = document.getElementById("header-menu");
  menu.style.height =
    menu.style.height === "0px" || !menu.style.height ? "100vh" : "0";
  document.body.style.overflowY =
    !document.body.style.overflowY || document.body.style.overflowY === "auto"
      ? "hidden"
      : "auto";
};

//Переход по ссылке

const redirect = (url) => {
  //console.log(redirect);
  window.location.assign(url);
};

//Переключает класс на элементе вызвавшем событии
const toggleClass = (event, className) => {
  //console.log(event);
  event.target.classList.toggle(className);
};

//Пройдется по всем элементам переданного класса, проверит что они активны/неактивны и заберет ссылку из data-file
const downloadFiles = (className, activeClass) => {
  //console.log(className, activeClass);
  const allElements = document.querySelectorAll(`.${className}`);
  const urls = [];
  allElements.forEach((item) => {
    const active = Array.from(item.classList).includes(activeClass);
    if (active) {
      urls.push(item.dataset.link);
    }
  });
  //Интервал нужен чтобы браузер не блокировал клик
  var interval = setInterval(
    (urls) => {
      let link = urls.pop();

      let a = document.createElement("a");
      a.style.visibility = "hidden";
      a.setAttribute("href", link);

      a.setAttribute("download", "");
      a.setAttribute("target", "_blank");
      a.click();
      if (urls.length === 0) {
        clearInterval(interval);
      }
      a.remove();
    },
    300,
    urls
  );
};

const copyLink = async (event) => {
  const card = event.path.find((element) => {
    //console.log(element, element.classList);
    return element.classList
      ? Array.from(element.classList).includes("big-card")
      : false;
  });
  if (card) {
    if (!navigator.clipboard) {
      console.log("clipboard api is unsupported");
      return;
    }

    await navigator.clipboard.writeText(card.dataset.link);
    //console.log("successful", event);
    showToast("Ссылка на заведение скопирована");
  } else {
    console.log("card wasn't found");
  }
};
const showToast = (content) => {
  if (document.querySelector(".toast-container")) {
    document.querySelector(".toast-container").remove();
  }

  const toast = document.createElement("div");
  toast.className = "toast-container";
  toast.appendChild(document.createTextNode(content));
  toast.onclick = () => toast.remove();
  document.body.appendChild(toast);
  setTimeout(() => {
    toast.addEventListener(
      "animationend",
      () => {
        toast.remove();
      },
      false
    );
  });
};


window.prependZero = (number) => {
    if (!number) {
      return "00";
    }
    let prependedNumber = number;
    if (typeof number === "string") {
      prependedNumber = Number.parseInt(number);
    }
    let fixedNumber = Math.floor(Number(prependedNumber));
  
    return (fixedNumber < 10 ? "0" + fixedNumber : fixedNumber).toString();
  };

if (currentPage === "contacts-page") {
  const validationMobile = new JustValidate("#form-mobile", {
    errorFieldCssClass: "is-invalid",
  });
  const validation = new JustValidate("#form", {
    errorFieldCssClass: "is-invalid",
  });
  const setupValidation = (valObject) => {
    console.log(valObject);
    valObject
      .addField(`#${valObject.form.id}name`, [
        {
          rule: "required",

          errorMessage: "Введите имя",
        },
        {
          rule: "minLength",
          value: 2,
          errorMessage: "Введите имя",
        },
        {
          rule: "maxLength",
          value: 30,
          errorMessage: "Не более 30 символов",
        },
      ])
      .addField(`#${valObject.form.id}email`, [
        {
          rule: "required",
          errorMessage: "Нужно ввести E-mail",
        },
        {
          rule: "email",
          errorMessage: "Введите E-mail",
        },
      ])
      .addField(`#${valObject.form.id}message`, [
        {
          rule: "required",
          errorMessage: "Введите сообщение",
        },
      ])
      .addField(`#${valObject.form.id}checkID`, [
        {
          errorMessage: " ",
          validator: (value) => value,
        },
      ])
      .onSuccess((event) => {
        submitContactsForm(event);
      })
      .onFail((event) => {
        console.log(event);
      });
  };
  setupValidation(validation);
  setupValidation(validationMobile);
}
